#!/usr/bin/env node

var dotenv = require('dotenv');
dotenv.load();

var url = require('url');
var async = require('async');
var workflow = require('../lib/workflow');
var moment = require('moment');

var sendgrid = require('sendgrid')(
    process.env.SENDGRID_USERNAME,
    process.env.SENDGRID_PASSWORD
);

// Global variable to save passing a filename all down the waterfall
// FIXME yeah ... globals
global.uploaded = 'https://s3.amazonaws.com/scheduled-scraper/';

// Starting page at the Vic Supreme Court
var civilCasesPage = url.format({
    protocol: 'http',
    hostname: 'www.supremecourt.vic.gov.au',
    pathname: 'home/forms+fees+and+services/registry+services/list+of+civil+cases/'
});

// No need to scrape on the weekend (temp workaround while using Heroku's simple scheduler)
// FIXME cf. https://devcenter.heroku.com/articles/scheduled-jobs-custom-clock-processes
// var today = moment().format('dddd');
// if (today === 'Saturday' || today === 'Sunday') {
//     console.log('It\'s the weekend ... take it easy :-)')
//     process.exit(0);
// }

// Begin processing ...
async.waterfall([
    // dummy function, just to allow parameters to be passed in to the waterfall initially
    // cf. https://github.com/caolan/async/issues/14
    function (callback) {
        callback(null, civilCasesPage);
    },

    // fetch the page containing a link to the court case list, updated daily,
    // and archive it locally so we can review and revise our selectors as necessary
    workflow.fetchCaseListPage,

    // extract the link to a pdf of the latest court cases
    workflow.extractDailyListUrl,

    // download the pdf
    workflow.downloadListPdf,

    // upload the file to S3
    workflow.uploadListPdf,

    // extract all data from the pdf as an array of strings
    workflow.extractCaseListData,

    // write the json data to file
    workflow.saveCasesJson

], function (err) {

    var re = /E11000 duplicate key/;
    // Don't worry about 'E11000 duplicate key error's
    if (re.test(err)) err = null;

    if (err) {
        console.error('Processing failed:', err);
        process.exit(1);
    }
    else {
        sendgrid.send({
            to:      'michaelallan@optushome.com.au',
            from:    'noreply@scheduled-scraper.herokuapp.com',
            subject: 'Scrape results for ' + moment().format('LLL'),
            text: (
                'All new Vic Supreme Court cases scraped and loaded.\n\n' +
                'An archived version of the original Court list can be found here:\n\n' +
                '    ' + global.uploaded
            )
        }, function (err, json) {
            if (err) {
                console.error('Sendgrid error:', err);
                process.exit(1);
            }
            else {
                console.log('Processing complete! All new cases saved, email report dispatched');
                process.exit(0);
            }
        });
    }
});
