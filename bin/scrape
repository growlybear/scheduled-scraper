#!/usr/bin/env node

var dotenv = require('dotenv');
dotenv.load();

var url = require('url');

var async = require('async');
var moment = require('moment');

var fetchCaseListPage = require('../lib/fetchCaseListPage');
var extractDailyListUrl = require('../lib/extractDailyListUrl');
var downloadDailyListPdf = require('../lib/downloadDailyListPdf');
var uploadDailyListPdf = require('../lib/uploadDailyListPdf');
var extractCaseListData = require('../lib/extractCaseListData');
var saveCaseData = require('../lib/saveCaseData');

var sendgrid = require('sendgrid')(
  process.env.SENDGRID_USERNAME,
  process.env.SENDGRID_PASSWORD
);

// Global variable to save passing a filename all down the waterfall
// FIXME yeah ... globals
global.bucket = 'https://s3.amazonaws.com/scheduled-scraper/';

// Starting page at the Vic Supreme Court
var civilCasesPage = url.format({
  protocol: 'http',
  hostname: 'www.supremecourt.vic.gov.au',
  pathname: 'home/forms+fees+and+services/registry+services/list+of+civil+cases/'
});

// No need to scrape on the weekend (temp workaround while using Heroku's simple scheduler)
// FIXME cf. https://devcenter.heroku.com/articles/scheduled-jobs-custom-clock-processes
// var today = moment().format('dddd');
// if (today === 'Saturday' || today === 'Sunday') {
//     console.log('It\'s the weekend ... take it easy :-)')
//     process.exit(0);
// }

// Set up a domain to handle non-zero exit codes
var domain = require('domain');
var d = domain.create();

// Domain emits 'error' when an error event is unhandled
d.on('error', function (err) {
  sendgrid.send({
    to:      'michaelallan@optushome.com.au',
    from:    'noreply@scheduled-scraper.herokuapp.com',
    subject: 'WHOOPS!!! Scrape FAILED for ' + moment().format('LLL'),
    text:    err.stack
  }, function (err, json) {
    if (err) {
      console.error('Sendgrid error:', err);
      process.exit(1);
    }
    else {
      console.log('ERROR DETECTED! Notification email report dispatched');
      process.exit(0);
    }
  });
});

d.run(function () {
  // Begin processing ...
  async.waterfall([
    // dummy function, just to allow parameters to be passed in to the waterfall initially
    // cf. https://github.com/caolan/async/issues/14
    function (callback) {
        callback(null, civilCasesPage);
    },

    // fetch the page containing a link to the court case list, updated daily,
    // and archive it locally so we can review and revise our selectors as necessary
    fetchCaseListPage,

    // extract the link to a pdf of the latest court cases
    extractDailyListUrl,

    // download the pdf locally for processing
    downloadDailyListPdf,

    // upload the file to S3 for archival purposes
    uploadDailyListPdf,

    // extract all data from the pdf as an array of strings
    extractCaseListData,

    // write the json data to file
    saveCaseData

  ], function (err) {

    var re = /E11000 duplicate key/;
    // Don't worry about 'E11000 duplicate key error's
    if (re.test(err)) err = null;

    if (err) {
      console.error('Processing failed:', err);
      process.exit(1);
    }
    else {
      sendgrid.send({
        to:      'michaelallan@optushome.com.au',
        from:    'noreply@scheduled-scraper.herokuapp.com',
        subject: 'Scrape results for ' + moment().format('LLL'),
        text: (
          'All new Vic Supreme Court cases for RER consideration have been scraped and loaded.\n\n' +
          'An archived version of the original Court list can be found here:\n\n' +
          global.bucket
        )
      }, function (err, json) {
        if (err) {
          console.error('Sendgrid error:', err);
          process.exit(1);
        }
        else {
          console.log('Processing complete! All new cases saved, email report dispatched');
          process.exit(0);
        }
      });
    }
  });
});
